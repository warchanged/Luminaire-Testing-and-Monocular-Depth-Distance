┌─────────────────────────────────────────────────────────────────┐
│                 Jetson 部署命令速查表                            │
└─────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════
【Windows端操作】
═══════════════════════════════════════════════════════════════════

1. 测试网络连接
   .\test_jetson_connection.ps1 -JetsonIP <IP地址>

2. 准备部署文件
   .\deploy_prepare.ps1

3. SSH连接Jetson
   ssh <用户名>@<IP地址>

4. 手动传输文件（如果自动传输失败）
   scp -r c:\Users\670358474\Downloads\Luminaire-Testing-and-Monocular-Depth-Distance\* <用户名>@<IP>:~/luminaire-detection/


═══════════════════════════════════════════════════════════════════
【Jetson端操作】
═══════════════════════════════════════════════════════════════════

▼ 环境检查

1. 检查Jetson环境
   cd ~/luminaire-detection
   chmod +x check_jetson_env.sh
   ./check_jetson_env.sh

2. 查看IP地址
   ifconfig
   # 或
   ip addr show

3. 查看系统信息
   cat /etc/nv_tegra_release


▼ Docker安装（如果未安装）

1. 安装Docker
   curl https://get.docker.com | sh
   sudo usermod -aG docker $USER
   newgrp docker

2. 安装NVIDIA Docker Runtime
   sudo apt-get update
   sudo apt-get install nvidia-docker2
   sudo systemctl restart docker

3. 验证安装
   docker --version
   docker info | grep -i nvidia


▼ 部署应用

1. 进入项目目录
   cd ~/luminaire-detection

2. 运行部署脚本
   chmod +x deploy_jetson.sh
   ./deploy_jetson.sh
   # 选择: 3) 构建并启动

3. 查看日志（等待构建完成）
   docker logs -f luminaire-detection
   # Ctrl+C 退出查看（容器继续运行）


▼ 容器管理

1. 查看运行中的容器
   docker ps

2. 查看所有容器
   docker ps -a

3. 查看日志
   docker logs luminaire-detection
   # 实时查看
   docker logs -f luminaire-detection

4. 重启容器
   docker restart luminaire-detection

5. 停止容器
   docker stop luminaire-detection

6. 启动容器
   docker start luminaire-detection

7. 删除容器
   docker stop luminaire-detection
   docker rm luminaire-detection

8. 进入容器内部
   docker exec -it luminaire-detection bash


▼ 性能监控

1. 查看GPU状态
   nvidia-smi

2. 实时监控GPU
   watch -n 1 nvidia-smi

3. 使用jtop（推荐）
   sudo pip install jetson-stats
   sudo jtop

4. 使用tegrastats
   sudo tegrastats

5. 查看系统资源
   htop


▼ 性能优化

1. 启用最大性能模式
   sudo nvpmodel -m 0
   sudo jetson_clocks

2. 查看当前性能模式
   sudo nvpmodel -q

3. 列出所有性能模式
   sudo nvpmodel -q --verbose


▼ 网络管理

1. 查看监听端口
   sudo netstat -tulnp | grep 7860

2. 查看防火墙状态
   sudo ufw status

3. 允许端口
   sudo ufw allow 7860

4. 测试端口连通性（从Windows）
   Test-NetConnection -ComputerName <IP> -Port 7860


▼ 故障排除

1. 查看Docker服务状态
   sudo systemctl status docker

2. 重启Docker服务
   sudo systemctl restart docker

3. 查看Docker磁盘使用
   docker system df

4. 清理未使用的资源
   docker system prune -a

5. 查看容器资源使用
   docker stats luminaire-detection

6. 查看容器详细信息
   docker inspect luminaire-detection

7. 增加swap空间（如果内存不足）
   sudo fallocate -l 8G /swapfile
   sudo chmod 600 /swapfile
   sudo mkswap /swapfile
   sudo swapon /swapfile
   # 永久生效
   echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

8. 查看SSH服务状态
   sudo systemctl status ssh
   # 启动SSH
   sudo systemctl start ssh
   sudo systemctl enable ssh


▼ 文件操作

1. 查看文件
   ls -lh ~/luminaire-detection

2. 编辑配置
   nano config.yaml

3. 查看磁盘空间
   df -h

4. 查看目录大小
   du -sh ~/luminaire-detection


═══════════════════════════════════════════════════════════════════
【访问应用】
═══════════════════════════════════════════════════════════════════

Web界面: http://<Jetson IP>:7860

例如: http://192.168.1.100:7860


═══════════════════════════════════════════════════════════════════
【常见问题快速解决】
═══════════════════════════════════════════════════════════════════

问题: 容器无法启动
解决: 
  docker logs luminaire-detection  # 查看错误
  docker restart luminaire-detection

问题: GPU不可用
解决:
  nvidia-smi  # 检查GPU
  docker info | grep -i nvidia  # 检查运行时

问题: 端口被占用
解决:
  sudo netstat -tulnp | grep 7860  # 查看占用进程
  sudo kill -9 <PID>  # 杀死进程

问题: 内存不足
解决:
  free -h  # 查看内存
  sudo swapon -s  # 查看swap
  # 增加swap（见上方故障排除）

问题: 网络无法访问
解决:
  sudo ufw status  # 检查防火墙
  sudo ufw allow 7860  # 开放端口


═══════════════════════════════════════════════════════════════════
【快速参考】
═══════════════════════════════════════════════════════════════════

配置文件位置:
  ~/luminaire-detection/config.yaml

日志文件位置:
  docker logs luminaire-detection

模型缓存位置:
  ~/luminaire-detection/cache/

结果输出位置:
  ~/luminaire-detection/results/


═══════════════════════════════════════════════════════════════════
【更新应用】
═══════════════════════════════════════════════════════════════════

1. 停止并删除旧容器
   docker stop luminaire-detection
   docker rm luminaire-detection

2. 传输新文件（从Windows）
   scp <新文件> <用户名>@<IP>:~/luminaire-detection/

3. 重新构建和启动
   cd ~/luminaire-detection
   ./deploy_jetson.sh
   # 选择: 3) 构建并启动


═══════════════════════════════════════════════════════════════════

提示: 
  - 使用 Tab 键可以自动补全命令和路径
  - 使用 Ctrl+C 可以中断当前命令
  - 使用 Ctrl+D 或 exit 可以退出SSH会话
  - 使用上下方向键可以浏览历史命令

